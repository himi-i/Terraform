name: 'Terraform'

on:
  push:
    branches:
      - 'stage'
  pull_request:
    branches:
      - 'main'
    paths-ignore:
      - '**/stage-terraform.yml'
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Confirm if you want to destroy the Terraform backend (type DESTROY to confirm)'
        required: true
        default: 'DESTROY'

env:
  AWS_REGION: ap-northeast-2   # set this to your preferred AWS region

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: stage
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check and Initialize Terraform Backend
        run: |
          #!/bin/bash
          check_bucket_exists() {
              BUCKET_NAME="$1"
              output=$(aws s3 ls "s3://$BUCKET_NAME" 2>&1)
              if echo "$output" | grep -q 'NoSuchBucket'; then
                  echo "false"
              elif echo "$output" | grep -q 'Access Denied'; then
                  echo "access denied"
              else
                  echo "true"
              fi
          }

          check_dynamodb_exists() {
            TABLE_NAME="$1"
            output=$(aws dynamodb describe-table --table-name "$TABLE_NAME" 2>&1)
            if echo "$output" | grep -q 'ResourceNotFoundException'; then
                echo "false"
            elif echo "$output" | grep -q 'AccessDeniedException'; then
                echo "access denied"
            else
                echo "true"
            fi
          }

          # Terraform 상태 관리를 위한 S3 버킷과 DynamoDB 테이블 이름
          S3_BUCKET="terraform1233"
          DYNAMODB_TABLE="terraform1232"

          # 버킷과 테이블의 존재 여부를 확인
          BUCKET_EXISTS=$(check_bucket_exists "$S3_BUCKET")
          DYNAMODB_EXISTS=$(check_dynamodb_exists "$DYNAMODB_TABLE")

          # Terraform 명령을 실행할 디렉터리로 이동
          if [ -d backend ]; then
              cd backend
          else
              echo "Backend directory does not exist. Exiting..."
              exit 1
          fi

          # Terraform 초기화 및 적용
          if [ "$BUCKET_EXISTS" = "true" ] && [ "$DYNAMODB_EXISTS" = "true" ]; then
              echo "Both S3 bucket and DynamoDB table exist. Skipping Terraform init."
          elif [ "$BUCKET_EXISTS" = "access denied" ] || [ "$DYNAMODB_EXISTS" = "access denied" ]; then
              echo "Access denied when checking resources. Please check your AWS credentials and permissions."
              exit 1
          else
              echo "Initializing Terraform because one or more resources do not exist."
              terraform init
              terraform plan
              terraform apply -auto-approve
          fi

      # Run Terraform init before plan and apply
      - name: Terraform Init and Plan
        run: |
          cd terraform_stage
          terraform init -reconfigure -backend-config="region=ap-northeast-2" \
            -backend-config="bucket=terraform1232" \
            -backend-config="key=stage/terraform/terraform.tfstate"
          terraform plan -input=false

      - name: Terraform Apply
        run: cd terraform_stage; terraform apply -auto-approve -input=false

  backend_setup:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.0'

      - name: Terraform Backend Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform_stage; terraform init \
            -backend-config="region=ap-northeast-2" \
            -backend-config="bucket=terraform1232" \
            -backend-config="key=stage/terraform/terraform.tfstate"

  backend_destroy:
    runs-on: ubuntu-latest
    needs: backend_setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.8.0'

      - name: Confirm Destruction
        if: ${{ github.event.inputs.confirm_destroy == 'DESTROY' }}
        run: |
          echo "Destruction confirmed. Proceeding with Terraform destroy operation."

      - name: Terraform Init for Destroy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform_stage; terraform init \
            -backend-config="region=ap-northeast-2" \
            -backend-config="bucket=terraform1232" \
            -backend-config="key=stage/terraform/terraform.tfstate"

      - name: Terraform Destroy
        if: ${{ github.event.inputs.confirm_destroy == 'DESTROY' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform_stage; terraform destroy -auto-approve
